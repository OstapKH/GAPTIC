import ast

class SQLInjectionChecker(ast.NodeVisitor):
    def __init__(self):
        self.vulnerable = False
        self.tainted_vars = set()
        self.assignments = {}

    def is_string_constant(self, node):
        # Only check for ast.Constant with string value
        return isinstance(node, ast.Constant) and isinstance(node.value, str)

    def visit_BinOp(self, node):
        # Check for string concatenation outside of function calls
        if isinstance(node.op, ast.Add) and (self.is_string_constant(node.left) or self.is_string_constant(node.right)):
            self.vulnerable = True
        self.generic_visit(node)

    def visit_Call(self, node):
        # Check if the function call is a cursor.execute or similar
        if isinstance(node.func, ast.Attribute) and node.func.attr == 'execute':
            for arg in node.args:
                if isinstance(arg, ast.BinOp) and isinstance(arg.op, (ast.Mod, ast.Add)):
                    # Detect string formatting with % operator or concatenation
                    self.vulnerable = True
                elif isinstance(arg, ast.JoinedStr):
                    # Detect f-strings
                    self.vulnerable = True
                elif isinstance(arg, ast.Call) and isinstance(arg.func, ast.Attribute) and arg.func.attr == 'format':
                    # Detect .format() method
                    self.vulnerable = True
        self.generic_visit(node)

def check_sql_injection(code):
    try:
        tree = ast.parse(code)
        checker = SQLInjectionChecker()
        checker.visit(tree)
        return checker.vulnerable
    except SyntaxError:
        return False

# Example 1: Vulnerable due to f-string
code_fragment_1 = """
cur.execute(f"SELECT * FROM users WHERE username = '{username}'")
"""

# Example 2: Vulnerable due to % formatting
code_fragment_2 = """
cur.execute("SELECT * FROM users WHERE username = '%s'" % username)
"""

# Example 3: Vulnerable due to .format() method
code_fragment_3 = """
cur.execute("SELECT * FROM users WHERE username = '{}'".format(username))
"""

# Example 4: Safe usage with parameterized query
code_fragment_4 = """
cur.execute("SELECT * FROM users WHERE username = ?", (username,))
"""

# Example 5: Safe usage with parameterized query using named parameters
code_fragment_5 = """
cur.execute("SELECT * FROM users WHERE username = :username", {'username': username})
"""

# Example 6: Vulnerable due to concatenation
code_fragment_6 = """
query = "SELECT * FROM users WHERE username = '" + username + "'"
cur.execute(query)
"""

# Example 7: Safe usage with hardcoded query
code_fragment_7 = """
cur.execute("SELECT * FROM users WHERE username = 'admin'")
"""

# Example 8: Vulnerable due to SQL injection in parameterized query
code_fragment_8 = """
cur.execute(f"UPDATE users SET email = '{new_email}' WHERE id = {user_id}")
"""

# Running the checks
print(check_sql_injection(code_fragment_1))  # Output: True
print(check_sql_injection(code_fragment_2))  # Output: True
print(check_sql_injection(code_fragment_3))  # Output: True
print(check_sql_injection(code_fragment_4))  # Output: False
print(check_sql_injection(code_fragment_5))  # Output: False
print(check_sql_injection(code_fragment_6))  # Output: True
print(check_sql_injection(code_fragment_7))  # Output: False
print(check_sql_injection(code_fragment_8))  # Output: True